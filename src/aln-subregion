#!/usr/bin/env bash

# Extracts n megabase (MB)-long region(s) from a sorted bam alignment 'inbam'.  Given
# the regions' lenght in MB each region is implicitly defined by
# chrom_i:start_i such that the explicit definition is chrom_i:start_i-end_i,
# where end_i = start_i + 10^6 * n.  The indexed bam is written in a
# subdirectory named as 'nMB' relative to the CWD.  The default
# chrom_i:start_i is 1:50,000,000.

usage="usage: `basename $0` -@ nthreads inbam lengthmegabase [chromA:startA [chromB:startB ...]] "
if test $# -lt 2; then
    echo $usage >&2
    exit 1
fi

# number of threads to samtools
if getopts ":@:" myopts; then
    nthreads=$OPTARG
fi
shift $(($OPTIND - 1))
nthreads=${nthreads:-6} # 6 threads by default

inbam=$1
seglen=${2:-1} # 1 MB by default
shift 2 # remaining positional arguments will be used in a loop

if test $# -eq 0; then
    set "1:50,000,000"
fi

# define output dir and files
tissue=`basename $inbam .bam`
segMB="${seglen}MB"
outbam="$segMB/$tissue-$segMB.bam"
readme="$segMB/README"
if ! test -d $segMB; then
    mkdir $segMB
    echo -e "bam file\tgenomic region(s)" > $readme
fi

# complete regions with calculated endpositions
for r; do
    # get start position without chromosome and possibly separating commas
    rstart=$(<<< $r sed 's/^[^:]*:\(\S\+\)/\1/' | tr -d ',')
    rend=$(( $rstart + $seglen * 1000000 ))
    region="$region $r-$rend"
done

# store region(s)
echo -e "$outbam\t$region" >> $readme
# filter for subregion and save alignment as $outbam
samtools view -bh@$nthreads $inbam $region > $outbam
samtools index -@$nthreads $outbam
